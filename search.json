[{"title":"Install Yunzai-Linux","path":"/2025/04/26/Install-Linux-Yunzai/","content":"Yunzai Linux搭建教程 Linux前言 小白建议直接使用TRSS Script一键部署 Ubuntu 通用版本教程注意:此教程要有一定的Linux基础，如没有请往下看宝塔安装教程 本教程的环境腾讯云的Ubuntu (版本22.04) 1.安装node.js 先更新一下 1sudo apt update 执行下面的命令安装node.js: 123sudo apt install apt-transport-https curl ca-certificates software-properties-commoncurl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -sudo apt-get install -y nodejs 验证一下安装是否成功 1node -v 2.安装redis 执行下面的命令: 1sudo apt install redis-server 安装完后会一般会自动启动 查看运行状态 1sudo systemctl status redis-server 一般会输出下面的内容 3.安装git 执行下面的命令: 1sudo apt-get install git 验证一下安装是否成功 1git --version 4.拉取仓库 执行下面的命令: 1git clone --depth=1 -b main https://gitee.com/yoimiya-kokomi/Yunzai-Bot.git 进入云崽目录 1cd Yunzai-Bot/ 5.安装依赖 先安装pnpm 1npm install pnpm -g 安装依赖: 1pnpm install -P 6.启动云崽1node app.js Ubuntu 20.04教程(采用宝塔) 本文的环境：纯净的Ubuntu（版本20.04） 1. 安装宝塔面板 为什么要安装宝塔面板？ 因为便于管理文件（更改配置文件、上传面板图等） 使用以下命令安装： 1wget -O install.sh https://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo sh install.sh ed8484bec 安装完成后，记得保存输出的面板地址和账号密码 2. 安装Nodejs与redis 打开面板地址，绑定手机号（如果你没有账号，请前往https://bt.cn/register.html注册） 登陆成功后，会显示一键安装页面，叉掉即可（不需要，因为不建站） 然后打开软件商店，搜索nodejs，找到nodejs版本管理器， 点击安装 点击安装即可 然后来到此界面，按下图所示操作 建议使用v16.18.0 安装好后，点击右侧的模块管理，来到下图所示界面，按图操作 安装完成，回到软件商店，搜索redis，按下图操作 3. 安装Yunzai 回到SSH终端，安装GIT，以便拉取仓库 执行以下命令： 1sudo apt-get install git 等待执行完成 然后拉取Yunzai，使用以下命令： 1git clone --depth=1 -b main https://gitee.com/Le-niao/Yunzai-Bot.git 大致输出以下内容（没有ERR或error就不用管） 12345678Cloning into &#x27;Yunzai-Bot&#x27;...remote: Enumerating objects: 1073, done.remote: Counting objects: 100% (1073/1073), done.remote: Compressing objects: 100% (1053/1053), done.remote: Total 1073 (delta 25), reused 911 (delta 2), pack-reused 0Receiving objects: 100% (1073/1073), 18.37 MiB | 9.07 MiB/sReceiving objects: 100% (1073/1073), 27.20 MiB | 11.79 MiB/s, done.Resolving deltas: 100% (25/25), done.Updating files: 100% (992/992), done. 然后cd进Yunzai根目录 1cd Yunzai-Bot pnpm安装过了，所以直接执行 1pnpm install -P 输出大致如下 12345678910111213141516171819202122232425262728293031 WARN deprecated uuid@3.4.0: Please upgrade to version 7 or higher. Older versions may use Math.random() in certain circumstances, which is known to be problematic. See https://v8.dev/blog/math-random for details.Packages: +362+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Packages are hard linked from the content-addressable store to the virtual store. Content-addressable store is at: /root/.local/share/pnpm/store/v3 Virtual store is at: node_modules/.pnpmProgress: resolved 498, reused 497, downloaded 0, added 362, donedependencies:+ art-template 4.13.2+ chalk 5.0.1+ chokidar 3.5.3+ https-proxy-agent 5.0.1+ inquirer 8.2.4+ lodash 4.17.21+ log4js 6.5.2+ md5 2.3.0+ moment 2.29.3+ node-fetch 3.2.6+ node-schedule 2.1.0+ node-xlsx 0.21.0+ oicq 2.3.1+ patch-package 6.5.0+ pm2 5.2.0+ puppeteer 13.7.0+ redis 4.1.0+ yaml 2.1.1devDependencies: skippedDone in 13.5s 记住！WARN不要惊慌，看到ERR或者error才是你需要解决的 然后node app启动机器人，按提示操作即可 CentOS 7.9.2111教程: 前提条件 首先，请确保你的环境完全干净，不支持已部署项目的机器（易翻车） 本文示例系统：CentOS 7.9.2111 开始安装 1. 安装Nodejs 先安装dnf 1yum install -y dnf 使用dnf安装fedora的epel-release插件 1dnf install epel-release 将存储库加到系统中 1curl -fsSL https://rpm.nodesource.com/setup_16.x | sudo sh - 安装nodejs，推荐大版本号16 1dnf module install nodejs:16 -y 然后测试是否正确安装 1node -v 输出以下即为成功安装 12[root@CentOS7.9.2111 ~]# node -vv16.19.0 2. 安装redis 使用以下命令安装并启动redis 1yum -y install redis &amp;&amp; redis-server --daemonize yes 如果像下图一样报错，那么是你没安装epel，返回上文查看命令 3. 安装GIT1dnf install git -y 4. 克隆仓库 使用以下命令克隆仓库 国内服务器（Gitee源） 1git clone --depth=1 -b main https://gitee.com/Le-niao/Yunzai-Bot.git 国外服务器（GitHub源） 1git clone --depth=1 -b main https://github.com/Le-niao/Yunzai-Bot.git 5. 安装依赖 cd进Yunzai根目录（别告诉我你不会cd） 1cd Yunzai-Bot 然后安装pnpm(-g表示全局) 1npm install pnpm -g 用pnpm安装依赖 1pnpm install -P 还需要安装Chrome依赖库 1yum install pango.x86_64 libXcomposite.x86_64 libXcursor.x86_64 libXdamage.x86_64 libXext.x86_64 libXi.x86_64 libXtst.x86_64 cups-libs.x86_64 libXScrnSaver.x86_64 libXrandr.x86_64 GConf2.x86_64 alsa-lib.x86_64 atk.x86_64 gtk3.x86_64 -y &amp;&amp; yum install libdrm libgbm libxshmfence -y &amp;&amp; yum install nss -y &amp;&amp; yum update nss -y 6. 安装中文字体，顺便把系统语言切换为中文1yum groupinstall fonts -y 然后查看当前系统所有语言包 1locale -a 往下翻，找到zh_CN.utf-8 切换 1localectl set-locale LANG=zh_CN.UTF-8 然后重启 7. 启动Yunzai并按提示操作即可1node app","tags":["代码"],"categories":["code"]},{"title":"Yunzai-Plugin","path":"/2025/04/26/Yunzai-plugin/","content":"Yunzai插件安装教程 插件安装教程 注：均为V3插件 锅巴插件(Guoba-Plugin) 主要提供云崽的网页端后台管理界面功能 安装教程： 第 1 步：下载插件 在云崽根目录下打开终端，运行 1git clone --depth=1 https://gitee.com/guoba-yunzai/guoba-plugin.git ./plugins/Guoba-Plugin/ 第 2 步：安装依赖 注：如果你不是通过pnpm安装的云崽，那么请【不要】使用此方式，请看方式2 如果你是使用pnpm安装的云崽，那么只需要在云崽根目录下运行此命令即可： 1pnpm install --filter=guoba-plugin 注：请务必直接复制提供的命令，否则可能会导致依赖丢失的情况，若发生需自行重新安装。--filter=guoba-plugin：只安装guoba-plugin下的依赖，其他依赖不处理，防止丢失。 第 3 步：运行插件 依赖安装完毕之后，直接运行即可，默认运行端口号是：50831 可在 config&#x2F;application.yaml 中修改 启动完成之后，可以在控制台中看到网页地址，复制到浏览器中即可访问。 如果访问不到，请发送#锅巴帮助指令获取帮助。 喵喵插件 (miao-plugin) Miao-Plugin是一个Yunzai-Bot的升级插件，提供包括角色查询等升级功能。 具体功能可在安装插件后 通过 #喵喵帮助 进行查看。如需进行设置可通过 #喵喵设置 命令进行管理。 推荐使用git进行安装，以方便后续升级。在Yunzai根目录夹打开终端，运行 使用gitee 1git clone https://gitee.com/yoimiya-kokomi/miao-plugin.git ./plugins/miao-plugin/ 进行安装。建议使用上述命令进行安装，以便于后续更新。 管理员发送#喵喵更新即可自动更新 抽卡插件 (flower-plugin) flower-plugin是一个适用于V3版本Yunzai-Bot的原神图鉴插件包，主要提供拓展抽卡功能，意在不修改本体抽卡卡池信息的情况下提供自定义卡池的拓展 在Yunzai-Bot根目录下，运行cmd，输入以下指令 1git clone --depth=1 https://gitee.com/Nwflower/flower-plugin.git ./plugins/flower-plugin/ py插件 我个人的建议是： 别去费精力装了真的巨麻烦 直接装个nonebot吧 换个登录端口实现1个号俩机器人 &#x2F; 使用ws插件连接 win安装py插件教程！ ①安装python这里推荐安装python3.10.8点击下载py3.10.8 下面两个对钩点上 然后点击Install Now等待安装完成 安装完成打开cmd输入py 查看是否有py版本输出 ②安装poetry 打开Powershell（需要管理员权限） 不会打开？不要慌 点击此处 如何在Windows 10&#x2F;11中打开PowerShell 打开后依次输入下面内容并回车（安装时间较长） 1python -m pip install -U pip 1pip install poetry 接着打开cmd发送poetry查看是否有版本输出 ③安装py本体1.安装py-plugin 请在云崽根目录使用 方法一：gitee安装 12git clone https://gitee.com/realhuhu/py-plugin.git ./plugins/py-plugin/ 方法二：github安装 12git clone https://github.com/realhuhu/py-plugin.git ./plugins/py-plugin/ 2.安装node.js 依赖 云崽根目录运行 12pnpm install --filter=py-plugin 3.安装nodejs 依赖 打开py-plugin后打开Powershell 运行下面命令报错了就用管理员权限打开 安装方法一（推荐）： 12poetry install 此时正在安装python依赖，第一行内容大致如下 Creating virtualenv py-plugin-8_cve6GP-py3.8 in &#x2F;root&#x2F;.cache&#x2F;pypoetry&#x2F;virtualenvs 安装方法二： 两个不是都用！！！ 12poetry run pip install -r requirements.txt --trusted-host mirrors.aliyun.com ​等待安装完成即可，之后重启云崽 py插件下载插件（指令） 使用#py下载插件+插件进行安装 使用#py卸载插件+插件进行卸载 py插件使用远程 1.打开 Yunzai-Bot/plugins/py-plugin 打开 config.yaml 2.将host后面的内容改成159.75.113.47 3.将port后面的内容改成50053 4.需要使用的插件在 config.yaml 的 plugins 中添加即可 远程py支持的插件（远程要在py目录 config.yaml 的 plugins 中添加） 点击此处查看支持的插件 多提一嘴nonebot怎么ws连接 &nbsp; 1. 请安装云崽的ws-plugin连接本地ws地址（端口默认为8081）并保持云崽的运行 打开云崽根目录 1cd Yunzai-Bot 下载ws-plugin 1git clone --depth=1 https://gitee.com/xiaoye12123/ws-plugin.git ./plugins/ws-plugin/ 安装依赖 1pnpm install --filter=ws-plugin 重新启动云崽机器人（为了生成配置文件） 连接本地bot(给云崽机器人依次发送) 1#ws添加连接 1NoneBot2,1 1ws://127.0.0.1:8080/onebot/v11/ws/ 完成后发送#ws查看连接来查看是否连接成功 出现带有以下内容的图片，则代表连接成功 123连接名字: NoneBot2连接类型: 1当前状态: 已连接 注意不要关闭云崽和NoneBot2本体！！！ 单个js格式插件通用安装方法 超级简单，只要把插件下载好后放入 Yunzai-bot/plugins/example 里即可 Yunzai-Bot插件编写教学前言 需要node.js基础,需要会使用redis数据库, 推荐使用VScode编写☞下载 单个的js格式插件(example) oicq文档 先新建一个文件，命名为Helloworld.js 命名可以改的，最好别用中文，改命名时要记得把下面的类名改了(大小写得一样) 输出Hello，world！ 代码示例 123456789101112131415161718192021222324252627//导出 类 类名===文件名 继承 插件类 export class Helloworld extends plugin &#123; constructor() &#123; super(&#123; //后端信息 name: &#x27;Helloworld&#x27;,//插件名字，可以随便写 dsc: &#x27;Helloworld&#x27;,//插件介绍，可以随便写 event: &#x27;message&#x27;,//这个直接复制即可，别乱改 priority: 250,//执行优先级：数值越低越6 rule: [ &#123; //正则表达试 reg: &#x27;^#你好$&#x27;, //函数 fnc: &#x27;Helloworld&#x27; &#125; ] &#125;); &#125;; //函数 async Helloworld(e) &#123; e.reply(&quot;Hello, world!&quot;);//输出Hello，world！ //阻止消息不再往下 return; &#125;;&#125;; reply函数的多种用法 直接发送内容： 12//发送内容:e.reply(&quot;Hello, world!&quot;); 是否引用回复： 12//是否引用回复:e.reply(&quot;Hello, world!&quot;, true);//false为不引用，true为引用 群聊是否撤回消息： 12//群聊是否撤回消息:e.reply(&quot;Hello, world!&quot;, false, &#123; recallMsg: 5 &#125;);//最大120秒后撤回，0则不处理 是否at用户: 12//是否at用户:e.reply(&quot;Hello, world!&quot;, false, &#123; recallMsg: 0 &#125;, true);//false为不at用户，true为at用户 如何使用回复组件 代码示例 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950//引入Yunzai插件功能import plugin from &#x27;../../../../../lib/plugins/plugin.js&#x27;//导出 类 类名:要与文件名一致 继承 插件类 export class Helloworld extends plugin &#123; constructor() &#123; super(&#123; //后端信息 name: &#x27;Helloworld&#x27;,//插件名字，可以随便写 dsc: &#x27;Helloworld&#x27;,//插件介绍，可以随便写 event: &#x27;message&#x27;,//这个直接复制即可，别乱改 priority: 250,//执行优先级：数值越低越6 rule: [ &#123; //正则表达式 reg: &#x27;^#你干嘛诶哟$&#x27;, //函数 fnc: &#x27;Helloworld&#x27; &#125; ] &#125;); &#125;; //函数 async Helloworld(e) &#123; /** 设置上下文，后续接收到内容会执行hei方法 */ this.setContext(&#x27;hei&#x27;); //发送消息 e.reply(&quot;1+1=?&quot;); &#125; //回复函数 async hei(e) &#123; //获取消息 let xiaoxi = e.message; //判断消息 if (xiaoxi == 3) &#123; //是 //回复 e.reply(&quot;回答正确&quot;) //结束上下文 this.finish(&#x27;hei&#x27;) &#125; else &#123; //否 //回复 e.reply(&quot;回答错误&quot;) //再次使用执行hei方法 this.setContext(&#x27;hei&#x27;) &#125; &#125;&#125;; 各式的判断预计…没有预计（开学随缘更新） 大型的插件包(plugin)(仅为参考，具体目录按照作者喜好命名) 文件&#x2F;文件夹 作用 是否可选 对应文章跳转 index.js 导入apps里的单js插件 否 点我 apps&#x2F; 存放单js插件的位置 否 点我 data&#x2F; 存放插件数据的位置,可存储到Yunzai-Bot自带的data文件夹 是 点我 resources&#x2F; 可存放README所使用的图片之类的资源文件 是 点我 config&#x2F; 存放插件的配置文件 否 点我 model&#x2F; 存放插件的封装文件 否 点我 guoba.support.js 支持锅巴插件显示信息或配置(显示信息如不添加会是插件索引内的描述) 是 点我 .gitignore 更新时不选中某些文件或文件夹 是 点我 index 此js会导入apps文件夹(你可以选中其他的)内的所有js文件 可添加载入提示 编写示例: 123456789101112131415161718192021222324252627282930313233343536//导入node:fs模块import fs from node:fs//输出提示logger.info(&#x27;更换为你需要的提示&#x27;)logger.info(&#x27;更换为你需要的提示&#x27;)logger.info(&#x27;更换为你需要的提示&#x27;)//如需更多可复制粘贴//info可替换为: debug mark error//加载插件const files = fs.readdirSync(&#x27;./plugins/你插件包的名字/apps&#x27;).filter(file =&gt; file.endsWith(&#x27;.js&#x27;))let ret = []files.forEach((file) =&gt; &#123; ret.push(import(`./apps/$&#123;file&#125;`))&#125;)ret = await Promise.allSettled(ret)let apps = &#123;&#125;for (let i in files) &#123; let name = files[i].replace(&#x27;.js&#x27;, &#x27;&#x27;) if (ret[i].status != &#x27;fulfilled&#x27;) &#123; logger.error(`载入插件错误：$&#123;logger.red(name)&#125;`) logger.error(ret[i].reason) continue &#125; apps[name] = ret[i].value[Object.keys(ret[i].value)[0]]&#125;export &#123; apps &#125; apps 可根据上方教程进行编写单js插件并放置于apps data 存放插件需要长期储存的文件,可存放于Yunzai-Bot自带的data文件夹 例如: 1data/xxxx/xxxx resources 存放插件的资源文件 例如: 12345data/README/imgdata/README/documentdata/commondata/help/help.htmldata/help/help.css config 存放插件的配置文件 例如: 12config/config.yamlconfig/help.yaml model 存放插件的封装文件 例如: 123config.jshelp.jssetting.js 锅巴支持 支持锅巴插件显示信息或配置(显示信息如不添加会是插件索引内的描述) 编写示例 gitignore 更新时不选中某些文件或文件夹 语法: 12345678910空格不匹配任意文件，可作为分隔符，可用反斜杠转义开头的文件标识注释，可以使用反斜杠进行转义! 开头的模式标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用 ! 也不会再次被包含。可以使用反斜杠进行转义/ 结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件/ 开始的模式匹配项目跟目录如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录** 匹配多级目录，可在开始，中间，结束? 通用匹配单个字符* 通用匹配零个或多个字符[] 通用匹配单个字符列表 示例: 12345678910# 忽略所有data内的文件data/*# 忽略所有config内的文件config/*# 忽略resources/help/themes内的所有文件夹resources/help/themes/**# 选择resources/help/themes/default文件夹!resources/help/themes/default/# 忽略所有的.txt文件*.txt","tags":["代码"],"categories":["code"]},{"title":"Install Yunzai","path":"/2025/04/26/Install-Yunzai/","content":"Yunzai搭建教程 Yunzai-Bot指南公告玩云崽死路一条！简介 Yunzai-Bot是原神qq群机器人,通过米游社接口,查询原神游戏信息,快速生成图片返回, 此指南是教您如何安装Yunzai-Bot和它的插件,编写插件和一些问题的解决方法。 注意：此教程主要以喵崽(Miao-Yunzai)为主,如果您使用的是其他崽，该文档只提供参考 目录 Yunzai-Bot的安装教程 安装git 安装redis 安装Yunzai-Bot本体 Yunzai-Bot的Linux安装教程 Ubuntu通用教程 Ubuntu20.04教程(基于宝塔) CentOS 7.9.2111 TRSS脚本的安装教程 基础操作 目录说明 问题解答 yunzai-bot插件编写教学 插件安装教程 锅巴插件(Guoba-Plugin) 喵喵插件 (miao-plugin) 抽卡插件 (flower-plugin) py插件 单个js格式插件通用安装方法 签名api 使用公共签名api(为避免不必要的争端，本文不提供公共API链接，请自行寻找) 自建签名api教程教程 ffmpeg安装教程 如何在windows获取ticket 常用链接 安装Yunzai-Bot安装redis 下载地址redis,密码:114514 解压后启动redis-server.exe这个文件。 要一直开着,不能关掉。（不要叉掉窗口） 安装NodejsNode.js 安装配置本章节我们将向大家介绍在 Windows 和 Linux 上安装 Node.js 的方法。 本安装教程以 Node.js v4.4.3 LTS(长期支持版本)版本为例。 Node.js 安装包及源码下载地址为：https://nodejs.org/en/download。 你可以根据不同平台系统选择你需要的 Node.js 安装包。 Node.js 历史版本下载地址：https://nodejs.org/dist/ **注意：**Linux 上安装 Node.js 需要安装 Python 2.6 或 2.7 ，不建议安装 Python 3.0 以上版本。 Windows 上安装 Node.js你可以采用以下两种方式来安装。 1、Windows 安装包(.msi) 本文实例以 v0.10.26 版本为例，其他版本类似， 安装步骤： 步骤 1 : 双击下载后的安装包 v0.10.26，如下所示： 步骤 2 : 点击以上的Run(运行)，将出现如下界面： 步骤 3 : 勾选接受协议选项，点击 next（下一步） 按钮 : 步骤 4 : Node.js默认安装目录为 “C:\\Program Files odejs&quot; , 你可以修改目录，并点击 next（下一步）： 步骤 5 : 点击树形图标来选择你需要的安装模式 , 然后点击下一步 next（下一步） 步骤 6 :点击 Install（安装） 开始安装Node.js。你也可以点击 Back（返回）来修改先前的配置。 然后并点击 next（下一步）： 安装过程： 点击 Finish（完成）按钮退出安装向导。 检测PATH环境变量是否配置了Node.js，点击开始&#x3D;》运行&#x3D;》输入”cmd” &#x3D;&gt; 输入命令”path”，输出如下结果： PATH&#x3D;C:\\oraclexe\\app\\oracle\\product\\10.2.0\\server\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0;c:\\python32\\python;C:\\MinGW\\bin;C:\\Program Files\\GTK2-Runtime\\lib;C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin;C:\\Program Files odejs;C:\\Users\\rg\\AppData\\Roaming pm 我们可以看到环境变量中已经包含了C:\\Program Files odejs\\ 检查Node.js版本 2、Windows 二进制文件 (.exe)安装32 位安装包下载地址 : http://nodejs.org/dist/v0.10.26/node.exe 64 位安装包下载地址 : http://nodejs.org/dist/v0.10.26/x64/node.exe 安装步骤 步骤 1 : 双击下载的安装包 Node.exe ，将出现如下界面 : 点击 Run（运行）按钮将出现命令行窗口： 版本测试进入 node.exe 所在的目录，如下所示： 如果你获得以上输出结果，说明你已经成功安装了Node.js。 Linux 上安装 Node.js直接使用已编译好的包Node 官网已经把 linux 下载版本更改为已编译好的版本了，我们可以直接下载解压后使用： 12345wget https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz // 下载# tar xf node-v10.9.0-linux-x64.tar.xz // 解压# cd node-v10.9.0-linux-x64/ // 进入解压目录# ./bin/node -v // 执行node命令 查看版本v10.9.0 解压文件的 bin 目录底下包含了 node、npm 等命令，我们可以使用 ln 命令来设置软连接： 12ln -s /usr/software/nodejs/bin/npm /usr/local/bin/ ln -s /usr/software/nodejs/bin/node /usr/local/bin/ Ubuntu 源码安装 Node.js以下部分我们将介绍在 Ubuntu Linux 下使用源码安装 Node.js 。 其他的 Linux 系统，如 Centos 等类似如下安装步骤。 在 Github 上获取 Node.js 源码： $ sudo git clone https://github.com/nodejs/node.gitCloning into ‘node’… 修改目录权限： $ sudo chmod -R 755 node 使用 .&#x2F;configure 创建编译文件，并按照： $ cd node$ sudo .&#x2F;configure$ sudo make$ sudo make install 查看 node 版本： $ node –versionv0.10.25 Ubuntu apt-get 命令安装命令格式如下： sudo apt-get install nodejssudo apt-get install npm CentOS 下源码安装 Node.js1、下载源码，你需要在https://nodejs.org/en/download/下载最新的Nodejs版本，本文以v0.10.24为例: cd &#x2F;usr&#x2F;local&#x2F;src&#x2F;wget http://nodejs.org/dist/v0.10.24/node-v0.10.24.tar.gz 2、解压源码 tar zxvf node-v0.10.24.tar.gz 3、 编译安装 cd node-v0.10.24.&#x2F;configure –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;node&#x2F;0.10.24makemake install 4、 配置NODE_HOME，进入profile编辑环境变量 vim &#x2F;etc&#x2F;profile 设置 nodejs 环境变量，在 export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL 一行的上面添加如下内容: #set for nodejsexport NODE_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;node&#x2F;0.10.24export PATH&#x3D;$NODE_HOME&#x2F;bin:$PATH :wq保存并退出，编译&#x2F;etc&#x2F;profile 使配置生效 source &#x2F;etc&#x2F;profile 验证是否安装配置成功 node -v 输出 v0.10.24 表示配置成功 npm模块安装路径 &#x2F;usr&#x2F;local&#x2F;node&#x2F;0.10.24&#x2F;lib&#x2F;node_modules&#x2F; **注：**Nodejs 官网提供了编译好的 Linux 二进制包，你也可以下载下来直接应用。 Mac OS 上安装你可以通过以下两种方式在 Mac OS 上来安装 node： 1、在官方下载网站下载 pkg 安装包，直接点击安装即可。 2、使用 brew 命令来安装： brew install node 学不会怎么办V我50我手把手教你 环境准备:Node.js,redis,git 安装gitGit 安装配置在使用Git前我们需要先安装 Git。Git 目前支持 Linux&#x2F;Unix、Solaris、Mac和 Windows 平台上运行。 Git 各平台安装包下载地址为：http://git-scm.com/downloads Linux 平台上安装Git 的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。 在有 yum 的系统上（比如 Fedora）或者有 apt-get 的系统上（比如 Debian 体系），可以用下面的命令安装： 各 Linux 系统可以使用其安装包管理工具（apt-get、yum 等）进行安装： Debian&#x2F;UbuntuDebian&#x2F;Ubuntu Git 安装命令为： $ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev $ apt-get install git $ git –versiongit version 1.8.1.2 Centos&#x2F;RedHat如果你使用的系统是 Centos&#x2F;RedHat 安装命令为： $ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel $ yum -y install git-core $ git –versiongit version 1.7.1 源码安装我们也可以在官网下载源码包来安装，最新源码包下载地址：https://git-scm.com/download 安装指定系统的依赖包： ########## Centos&#x2F;RedHat ##########$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel ########## Debian&#x2F;Ubuntu ##########$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev 解压安装下载的源码包： $ tar -zxf git-1.7.2.2.tar.gz$ cd git-1.7.2.2$ make prefix&#x3D;&#x2F;usr&#x2F;local all$ sudo make prefix&#x3D;&#x2F;usr&#x2F;local install Windows 平台上安装在 Windows 平台上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行： 安装包下载地址：https://gitforwindows.org/ 官网慢，可以用国内的镜像：https://npm.taobao.org/mirrors/git-for-windows/。 完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。 在开始菜单里找到”Git”-&gt;”Git Bash”，会弹出 Git 命令窗口，你可以在该窗口进行 Git 操作。 Mac 平台上安装在 Mac 平台上安装 Git 最容易的当属使用图形化的 Git 安装工具，下载地址为： http://sourceforge.net/projects/git-osx-installer/ 安装界面如下所示： 安装Miao-Yunzai本体 新建一个文件夹(也可以不建),命名随便,最好别用中文(可省略) 选个拉取方式: 使用git-bash 1.1 右键文件夹,选择git bash here 使用原生自带终端 2.1 进入你要安装Yunzai的文件夹 2.2 打开终端(在文件夹路径处将文件夹路径改为cmd或者powershell) 克隆项目 命令 建议使用喵崽 1git clone --depth=1 https://gitee.com/yoimiya-kokomi/Miao-Yunzai.git 进入Yunzai-Bot&#x2F;Miao-Yunzai目录 使用 1cd Miao-Yunzai 安装喵喵插件 (miao-plugin) 先安装pnpm,已安装的可以跳过 1npm install pnpm -g （因为我已经安装过了,所以就不放图了） 这里会发生的一些问题：输完卡住不动了怎么办？或者提示 npm ERR！？或者其他的报错？原因：你的服务器网络太差了,根本下载不动,没问题才怪了。解决方案：换源,执行命令来更换淘宝镜像源 npm config set registry https://registry.npmmirror.com 然后再次执行安装 pnpm 的命令 npm install pnpm -g 还有可能是你的nodejs版本太高，请使用node -v 查看您的nodejs版本.(建议版本v16.16.0) 执行该命令安装喵喵插件 12git clone --depth=1 https://gitee.com/yoimiya-kokomi/miao-plugin.git ./plugins/miao-plugin/pnpm install -P ​ 安装依赖 1pnpm install -P 运行（首次运行按提示输入登录）(需要先开启Redis-server) 1node app 如果觉得启动麻烦,可使用脚本启动： 新建一个文件,把后缀改成bat,然后点击编辑 把下面代码复制进去,然后进行修改: 第一行中,第一个双引号无需填写,第二个双引号填写你redis路径 第二行填写你Yunzai-Bot根目录 1234start &quot;&quot; &quot;redis-server.exe路径&quot;cd 机器人路径node apppause 改完后保存运行即可食用 安装签名api 点击上面链接查看安装教程 Linux 教程中的操作系统有(Ubuntu 20.04),(CentOS 7.9.2111) Linux安装教程 另：如果因为无法登录等问题需要换TRSS-Yunzai，只需要在Yunzai根目录输入1node trss 即可！ 安装TRSS脚本 此教程由热心网友提供，不提供任何的帮助。 Windows平台:MSYS2：Linux 兼容层（关闭 虚拟化 或 内存小于等于4G 推荐） MSYS2 安装 MSYS2官网 MSYS2 安装程序PS:若速度太慢，可使用 GitHub 加速，如：GitHub Proxy 安装脚本PS: 首次安装可能会自动关闭，再次启动即可PS: 以下内容复制至TRSS.me 在MSYS2内执行: 1bash &lt;(curl -L gitee.com/TimeRainStarSky/TRSS_Yunzai/raw/main/Install-MSYS2.sh) 自定义功能 自定义 安装路径 DIR 和 启动命令 CMD（可用于多开） 举例：将脚本安装至 /Bot 启动命令 trss 1234# 原安装命令bash &lt;(curl -L gitee.com/TimeRainStarSky/TRSS_Yunzai/raw/main/Install-MSYS2.sh)# 修改后安装命令DIR=/Bot CMD=trss bash &lt;(curl -L gitee.com/TimeRainStarSky/TRSS_Yunzai/raw/main/Install-MSYS2.sh) ArchWSL：Linux 子系统（开启 虚拟化 且 内存大于等于8G 推荐） 系统要求 Windows 11 及以上 &#x2F; Windows Server 2022及以上 升级为WSL2的要求: 对于x64的系统要求win10版本为1903 或者更高, 可使用 Win + R 输入winver查看版本 安装ArchLinux 右键开始菜单, 选择终端(管理员)并执行以下内容: 1234# 启用 适用于 Linux 的 Windows 子系统dism /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart# 启用 虚拟机平台dism /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 重启设备后，启用 WSL2 1wsl --set-default-version 2 输出以下内容则表示 WSL2 启用成功 12有关与 WSL 2 的主要区别的信息，请访问 https://aka.ms/wsl2操作成功完成。 更新 WSL2 内核 1wsl --update _PS: 如果速度太慢,可手动下载更新包: https://aka.ms/wsl2kernel4. 从ArchWSL GitHub Releases ..&#x2F;..&#x2F;..&#x2F;assets中下载Arch.zip并解压PS: 如果速度太慢可使用Github加速,如: Github Proxy5. 启动Arch.exePS: 如果输出以下内容则表示ArchWSL安装成功 1234Using: xxx\\rootfs.tar.gzInstalling...Installation completePress enter to continue... 在文件资源管理器中打开(Win + R运行): 1\\\\wsl$\\Arch\\etc\\pacman.d 编辑mirrorlist,在China后选择你喜欢的镜像源,删除开头的#, 保存 1\\\\wsl$\\Arch\\etc 编辑pacman.conf,在文件末尾添加以下内容并保存: 123456789101112131415[archlinuxcn]Server = https://mirrors.ustc.edu.cn/archlinuxcn/$archServer = https://mirrors.bfsu.edu.cn/archlinuxcn/$archServer = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$archServer = https://mirrors.aliyun.com/archlinuxcn/$archServer = https://mirrors.163.com/archlinux-cn/$archServer = https://mirrors.tencent.com/archlinuxcn/$archServer = https://repo.archlinuxcn.org/$archSigLevel = Never[arch4edu]Server = https://mirrors.bfsu.edu.cn/arch4edu/$archServer = https://mirrors.tuna.tsinghua.edu.cn/arch4edu/$archServer = https://mirrors.aliyun.com/arch4edu/$archServer = https://mirrors.tencent.com/arch4edu/$archSigLevel = Never 启动Arch.exe_PS: 如果输出以下内容则表示ArchWSL启动成功: 1[root@xxx Arch]# 更改软件包 1pacman -Syy archlinux-keyring &amp;&amp; pacman -Syu 启动：运行 Arch.exe 或终端输入 wsl 文件管理: 在文件资源管理器中打开(Win + R运行): 1\\\\wsl$\\Arch\\root 卸载: wsl --unregister Arch PS: 其他功能请参阅 Microsoft 官方文档 和 ArchWSL 文档 安装脚本PS:以下内容复制至TRSS.me 在ArchLinux里执行: 1bash &lt;(curl -L gitee.com/TimeRainStarSky/TRSS_Yunzai/raw/main/Install.sh) 自定义功能 自定义 安装路径 DIR 和 启动命令 CMD（可用于多开） 举例：将脚本安装至 /Bot 启动命令 trss 1234# 原安装命令bash &lt;(curl -L gitee.com/TimeRainStarSky/TRSS_Yunzai/raw/main/Install.sh)# 修改后安装命令DIR=/Bot CMD=trss bash &lt;(curl -L gitee.com/TimeRainStarSky/TRSS_Yunzai/raw/main/Install.sh) Linux平台:Docker：应用容器（推荐） PS:以下内容复制至TRSS.me 安装脚本 在Linux中执行: 1bash &lt;(curl -L gitee.com/TimeRainStarSky/TRSS_Yunzai/raw/main/Install-Docker.sh) 自定义功能 自定义 安装路径DIR启动命令CMD容器名DKNAME 举例：将脚本安装至 /Bot 启动命令 trss 容器名TRSS 1234# 原安装命令bash &lt;(curl -L gitee.com/TimeRainStarSky/TRSS_Yunzai/raw/main/Install-Docker.sh)# 修改后安装命令DIR=/Bot CMD=trss bash &lt;(curl -L gitee.com/TimeRainStarSky/TRSS_Yunzai/raw/main/Install-Docker.sh) 容器管理 查看容器 1docker ps -as 启动容器 1docker start 容器名 # 默认开机自启，无需手动启动 重启容器 1docker restart -t0 容器名 停止容器 1docker stop -t0 容器名 删除容器 1docker rm -f 容器名 重建容器 1234567docker run -itd -h 主机名 --name 容器名 -v 数据路径:/root/项目名 --restart always #自启动 -p 主机端口:容器端口 #端口映射 镜像名 服务器 Linux 发行版 推荐使用 Debian 11 以上 若只有 Debian 10 以下，可执行以下命令并重启服务器后升级到 Debian 12 1234echo &#x27;deb http://ftp.cn.debian.org/debian bookworm main contrib non-freedeb http://ftp.cn.debian.org/debian bookworm-updates main contrib non-freedeb http://ftp.cn.debian.org/debian-security bookworm-security main contrib non-free&#x27;&gt;/etc/apt/sources.listapt update &amp;&amp; apt full-upgrade -y &amp;&amp; apt autoremove --purge -y &amp;&amp; apt clean 基础操作 启动云崽： node app 查看日志： pnpm run log 后台运行： pnpm start 关闭云崽： 对着机器人发送 #关机,或者在关掉云崽运行窗口，后台运行输入pnpm stop关闭云崽 功能列表： #帮助,#插件名称+帮助 更新云崽： #全部更新,#强制更新,#更新,git pull 重置云崽的部分设置(QQ 号,主人 QQ 等)： pnpm run login 目录说明 目录 说明 config\\config\\qq.yaml 可以修改登录方式,QQ 号 config\\config\\redis.yaml redis的设置（非必要别修改） config\\config\\other.yaml 可以修改主人 QQ data\\face 存放添加表情的位置 data\\MysCookie 存放 cookie 的位置 logs\\ 存放日志文件的位置 plugins\\example 存放 js 插件的位置 Yunzai-Bot\\plugins 存放大型插件的位置,如喵喵插件 问题解答 问题解答 Yunzai-Bot插件编写教学 Yunzai-Bot插件编写教学 插件安装教程 插件安装教程 签名API自建签名api教程教程Windows 第一步:下载 下载并解压文件,密码:0000 第二步:安装jdk 双击本文件夹下的jdk安装包安装Java环境 第三步:启动 双击启动start.bat 第四步:更新 将icqq更新最新版 1pnpm up icqq 将喵崽更新到最新版本 1git pull 第五步:配置 更改喵崽配置文件(具体路径为Miao-Yunzai&#x2F;config&#x2F;config&#x2F;bot.yaml) 打开bot.yaml文件并修改: 12sign_api_addr: http://127.0.0.1:8080/sign?key=114514ver: 打开qq.yaml文件修改: 1platform: 2 最后，愉快地登录喵崽,开始愉快的玩耍 如果上述步骤没看懂，我只能劝你放弃…… Linux 安装 参考 unidbg-fetch-qsign-shell 更新 将icqq更新到最新 1pnpm up icqq 将喵崽更新到最新版本 1git pull 配置 更改喵崽配置文件(具体路径为Miao-Yunzai&#x2F;config&#x2F;config&#x2F;bot.yaml) 打开bot.yaml文件并修改: 1sign_api_addr: http://0.0.0.0:8080/sign?key=114514 打开qq.yaml文件修改: 1platform: 2 最后，愉快地登录喵崽,开始愉快的玩耍 如果上述步骤没看懂，我只能劝你放弃…… 获取ticket如何在Windows获取ticket 浏览器:Edge 复制滑动验证链接,到浏览器打开 按F12打开控制台,选择网络 然后开始验证,验证完后找到下图圈的那个东西,单击 选择预览,复制ticket(注意:复制ticket时不要把两边的双引号复制进去) 最后返回终端,粘贴刚刚复制的ticket,并回车 如何在安卓获取ticket 应用：滑动验证助手(点击下载) 复制滑动验证链接或请求码,打开滑动验证助手APP 输入滑动验证链接或请求码，点击下一步 手动通过验证，复制ticket 最后返回终端,粘贴刚刚复制的ticket,并回车 ffmpeg安装教程 先下载压缩包 ffmpeg下载链接☞ffmpeg,密码114514 下载完后解压,位置随便(路径中不能有空格！最好也不要有中文) 之后找到ffmpeg.exe和ffprobe.exe,复制文件路径 填写路径,有两种方法。 直接修改配置文件 找到配置文件,如下图 最后把路径粘贴到下图的位置(注意:冒号后面有空格) 冒号后面是有空格,一定要注意这一点。 锅巴里面设置 先登陆锅巴 然后点配置管理–&gt;基础配置 把路径粘贴进去 最后点保存 注意事项:路径不能有空格和中文！！！,必须用单引号,必须用反斜杠。有些时候日志提示 请检查ffmpeg配置 大概率是插件本身的问题,而不是你的 ffmpeg 没配置好 常用链接 下载链接（均为网盘）有密码的均为114514 名称 下载地址 ffmpeg ☞ffmpeg 滑块验证助手 ☞滑块验证 常用地址 名称 作者 GitHub Gitee 备注 Yunzai-Bot 索引库 @渔火Arcadia ☞GitHub ☞Gitee 云崽相关内容索引库 Miao-Yunzai @喵喵 ☞GitHub ☞Gitee 喵版 Yunzai TRSS-Yunzai @时雨🌌星空 ☞GitHub ☞Gitee Yunzai 应用端，支持多账号，支持协议端：go-cqhttp、ComWeChat、GSUIDCore、ICQQ、QQBot、QQ频道、微信、KOOK、Telegram、Discord、OPQBot Yunzai-Bot @Le-niao ☞GitHub ☞Gitee 原版 Yunzai Yunzai-Bot @喵喵 ☞GitHub ☞Gitee 喵喵维护版 Yunzai Yunzai-Bot-lite @听语惊花 ☞GitHub ☞Gitee 轻量版，无原神功能 常用目录结构 目录 说明 config\\config\\qq.yaml 可以修改登录方式，QQ 号 config\\config\\other.yaml 可以修改主人 QQ data\\face 存放添加表情的位置 data\\data\\MysCookie 存放 cookie 的位置 plugins\\example 存放 js 插件的位置 lugins 存放大型插件的位置，如喵喵插件","tags":["代码"],"categories":["code"]},{"title":"Hello World","path":"/2025/04/26/hello-world/","content":"欢迎来到饺子的小窝 很高兴你能来到这里 C12345#include &lt;stdio.h&gt;int main(void) &#123; printf(&quot;Hello, World! &quot;); return 0;&#125; C++123456#include &lt;bits/stdc++.h&gt;using namespace std;int main() &#123; cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; endl; return 0;&#125; Python1print(&quot;Hello, World!&quot;) Java12345class HelloWorld &#123; public static void main(String[] args) &#123; System.out.println(&quot;Hello, World!&quot;); &#125;&#125; Go12345package mainimport &quot;fmt&quot;func main() &#123; fmt.Println(&quot;Hello, World!&quot;)&#125;","tags":["生活"],"categories":["Hello"]},{"title":"关于","path":"/about/index.html","content":"首页关于归档JiaoziHello 关于本站 本站没有任何推广和打赏链接，如果您觉得哪个作品不错，欢迎去对应的仓库点个赞，或者在对应的文章下面留言互动一下。 开源项目无任何盈利目的，只在工作闲暇时间进行维护，有相关需求请前往对应项目提 Issue 进行反馈，通过私人邮件询问开源项目问题可能得不到答复。"},{"title":"友链","path":"/friends/index.html","content":"友链关于小伙伴们如果宇宙中真有什么终极的逻辑，那就是我们终有一天会在舰桥上重逢，直到生命终结。 [2023-12] 友链失联了怎么办?添加友链后如果网站长期无法访问，可能会被取消友链！如果您的网站恢复了，可以在申请友链时创建的那条 issue 中评论告知。 朋友们近期的文章 如何交换友链？ 您的网站应满足以下全部条件： 安全合规：合法的、非营利性、无木马植入的 HTTPS 站点。 非空壳网站：网站内发布至少 五篇 原创文章，内容题材不限。 我们需要有一定的有效互动： 先友后链：与博主有至少 半年 的有效互动，例如 issue 或者评论留言。 [2023-12] 友链申请条件变更说明降低了对商业广告的要求，可以有但是不能太多。提高了「有效互动」的定义：5次更改为半年。 我已满足全部条件，快告诉我如何交换友链！如果您没有满足上述条件，即时提交了申请也不会通过哦～第一步：新建 Issue新建 GitHub Issue 按照模板格式填写并提交。为了提高图片加载速度，建议优化头像：打开 压缩图 上传自己的头像，将图片尺寸调整到 144px 后下载。将压缩后的图片上传到 去不图床 或者其它稳定的图床并使用此图片链接作为头像。第二步：添加友链并等待管理员审核请添加本站到您的友链中：1234title: xxxurl: https://xxx.comavatar: screenshot: 待管理员审核通过，添加了 active 标签后，回来刷新即可生效。如果您需要更新自己的友链，请直接修改 issue 内容，大约 3 分钟内生效，无需等待博客重新部署。"},{"title":"收藏","path":"/bookmark/index.html","content":"…"},{"title":"探索","path":"/explore/index.html","content":"…"},{"title":"朋友文章","path":"/friends/rss/index.html","content":""},{"title":"Page","path":"/page/index.html","content":"This is a page test."},{"path":"/assets/images/picture.html","content":"picture文件夹说明 主要存放README.md文件所需要用到的图片"}]